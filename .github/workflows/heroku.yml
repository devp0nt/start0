name: Deploy to Heroku

on:
  push:
    branches:
      - prod
      - stage

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ========= Prepare
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set variables names
        run: |
          if [ "${{ github.ref }}" = "refs/heads/prod" ]; then
            echo "HEROKU_APP_NAME=${{ secrets.PROD_HEROKU_APP_NAME }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}" >> $GITHUB_ENV
            echo "APP_INSTANCES_COUNT=${{ vars.PROD_APP_INSTANCES_COUNT }}" >> $GITHUB_ENV
            echo "SKIP_SCALE_DOWN_WORKER_GENERAL=${{ vars.PROD_SKIP_SCALE_DOWN_WORKER_GENERAL }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/stage" ]; then
            echo "HEROKU_APP_NAME=${{ secrets.STAGE_HEROKU_APP_NAME }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.STAGE_DATABASE_URL }}" >> $GITHUB_ENV
            echo "APP_INSTANCES_COUNT=${{ vars.STAGE_APP_INSTANCES_COUNT }}" >> $GITHUB_ENV
            echo "SKIP_SCALE_DOWN_WORKER_GENERAL=${{ vars.STAGE_SKIP_SCALE_DOWN_WORKER_GENERAL }}" >> $GITHUB_ENV
          else
            echo "No matching branch found for HEROKU_APP_NAME or DATABASE_URL."
            exit 1
          fi

      - name: Mask secrets
        run: echo "::add-mask::${{ env.DATABASE_URL }}"

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # ========= Migrations

      - name: Build worker-migrator
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deploy/Dockerfile
          push: false
          load: true
          tags: worker-migrator
          target: worker-migrator
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            SOURCE_VERSION=${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Run worker-migrator
        run: |
          docker run --rm \
          -e DATABASE_URL="${{ env.DATABASE_URL }}" \
          worker-migrator

      # ========= Build and push

      - name: Login to heroku container registry
        uses: docker/login-action@v2
        with:
          registry: registry.heroku.com
          username: ${{ secrets.HEROKU_EMAIL }}
          password: ${{ secrets.HEROKU_API_KEY }}

      - name: Build and push app (web)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deploy/Dockerfile
          push: true
          provenance: false
          tags: registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web
          target: app
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            SOURCE_VERSION=${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and push worker-general
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deploy/Dockerfile
          push: true
          provenance: false
          tags: registry.heroku.com/${{ env.HEROKU_APP_NAME }}/worker-general
          target: worker-general
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            SOURCE_VERSION=${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      # - name: Build and push datadog
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     file: ./deploy/Dockerfile
      #     push: true
      #     provenance: false
      #     tags: registry.heroku.com/${{ env.HEROKU_APP_NAME }}/datadog
      #     target: datadog
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache

      # ========= Release datadog

      # - name: Release datadog
      #   env:
      #     HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      #   run: heroku container:release -a ${{ env.HEROKU_APP_NAME }} datadog

      # ========= Release worker-general

      - name: Release worker-general
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          if [ "${{ env.SKIP_SCALE_DOWN_WORKER_GENERAL }}" != "1" ]; then
            # Scale down the current worker-general
            echo "Scaling down the current worker-general..."
            heroku ps:scale worker-general=0 --app ${{ env.HEROKU_APP_NAME }}
          else
            echo "Skip scale down the current worker-general"
          fi

          # TODO
          # # Check heroku logs for the "worker-general ${{ github.sha }} stopped" message within 30 seconds
          # echo "Checking Heroku logs for 'worker-general ${{ github.sha }} stopped'..."
          # for i in {1..30}; do
          #   echo "Checking logs attempt #$i"
          #   LOG_OUTPUT=$(heroku logs --app ${{ env.HEROKU_APP_NAME }} --dyno worker-general --num 10000)
          #   # (doess not work, idkw) 
          #   # LOG_STATUS=$(echo "$LOG_OUTPUT" | grep "worker-general ${{ github.sha }} stopped")
          #   case "$LOG_OUTPUT" in
          #     *"worker-general ${{ github.sha }} alive"*)
          #       LOG_STATUS="found"
          #       ;;
          #     *)
          #       LOG_STATUS=""
          #       ;;
          #   esac
          #   if [ -n "$LOG_STATUS" ]; then
          #     echo "worker-general has stopped successfully."
          #     break
          #   fi
          #   sleep 1
          # done

          # if [ -z "$LOG_STATUS" ]; then
          #   echo "worker-general failed to stop within 30 seconds."
          #   echo "Scaling up the previous worker-general..."
          #   heroku ps:scale worker-general=1 --app ${{ env.HEROKU_APP_NAME }}
          #   echo "Finished scaling up the previous worker-general."
          #   exit 1
          # fi

          # Release the new worker-general
          echo "Releasing the new worker-general..."
          if ! heroku container:release worker-general --app ${{ env.HEROKU_APP_NAME }}; then
            echo "Failed to release the new worker-general."
            echo "Scaling up the previous worker-general..."
            heroku ps:scale worker-general=1 --app ${{ env.HEROKU_APP_NAME }}
            echo "Finished scaling up the previous worker-general."
            exit 1
          fi

          # Scale up the new worker-general
          heroku ps:scale worker-general=1 --app ${{ env.HEROKU_APP_NAME }}

          # Check heroku logs for the "worker-general ${{ github.sha }} alive" message within 30 seconds
          echo "Checking Heroku logs for 'worker-general ${{ github.sha }} alive'..."
          for i in {1..30}; do
            echo "Checking logs attempt #$i"
            LOG_OUTPUT=$(heroku logs --app ${{ env.HEROKU_APP_NAME }} --dyno worker-general --num 10000)
            # (doess not work, idkw) 
            # LOG_STATUS=$(echo "$LOG_OUTPUT" | grep "worker-general ${{ github.sha }} alive")
            case "$LOG_OUTPUT" in
              *"worker-general ${{ github.sha }} alive"*)
                LOG_STATUS="found"
                ;;
              *)
                LOG_STATUS=""
                ;;
            esac
            if [ -n "$LOG_STATUS" ]; then
              echo "worker-general is up and running successfully."
              exit 0
            fi
            sleep 1
          done

          echo "$LOG_OUTPUT"
          echo "worker-general failed to report alive status within 30 seconds."
          exit 1

      # ========= Release app (web)

      - name: Release app (web)
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Release the new web app
          heroku container:release -a ${{ env.HEROKU_APP_NAME }} web

          # Check heroku logs for the "app ${{ github.sha }} alive" message within 30 seconds
          echo "Checking Heroku logs for 'app ${{ github.sha }} alive'..."
          for i in {1..30}; do
            echo "Checking logs attempt #$i"
            LOG_OUTPUT=$(heroku logs --app ${{ env.HEROKU_APP_NAME }} --dyno web --num 10000)
            # (doess not work, idkw) 
            # LOG_STATUS=$(echo "$LOG_OUTPUT" | grep "app ${{ github.sha }} alive")
            case "$LOG_OUTPUT" in
              *"app ${{ github.sha }} alive"*)
                LOG_STATUS="found"
                ;;
              *)
                LOG_STATUS=""
                ;;
            esac
            if [ -n "$LOG_STATUS" ]; then
              echo "The web app is alive and running successfully."
              echo "Scaling up the new web app to ${{ env.APP_INSTANCES_COUNT }} instances..."
              heroku ps:scale web=${{ env.APP_INSTANCES_COUNT }} -a ${{ env.HEROKU_APP_NAME }}
              echo "Finished scaling up the new web app to ${{ env.APP_INSTANCES_COUNT }} instances."
              exit 0
            fi
            sleep 1
          done

          echo "$LOG_OUTPUT"
          echo "web app failed to report alive status within 30 seconds."
          exit 1
