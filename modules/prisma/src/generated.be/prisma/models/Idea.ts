
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Idea` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Idea
 * 
 */
export type IdeaModel = runtime.Types.Result.DefaultSelection<Prisma.$IdeaPayload>

export type AggregateIdea = {
  _count: IdeaCountAggregateOutputType | null
  _avg: IdeaAvgAggregateOutputType | null
  _sum: IdeaSumAggregateOutputType | null
  _min: IdeaMinAggregateOutputType | null
  _max: IdeaMaxAggregateOutputType | null
}

export type IdeaAvgAggregateOutputType = {
  sn: number | null
}

export type IdeaSumAggregateOutputType = {
  sn: number | null
}

export type IdeaMinAggregateOutputType = {
  id: string | null
  sn: number | null
  createdAt: Date | null
  updatedAt: Date | null
  title: string | null
  description: string | null
}

export type IdeaMaxAggregateOutputType = {
  id: string | null
  sn: number | null
  createdAt: Date | null
  updatedAt: Date | null
  title: string | null
  description: string | null
}

export type IdeaCountAggregateOutputType = {
  id: number
  sn: number
  createdAt: number
  updatedAt: number
  title: number
  description: number
  logs: number
  _all: number
}


export type IdeaAvgAggregateInputType = {
  sn?: true
}

export type IdeaSumAggregateInputType = {
  sn?: true
}

export type IdeaMinAggregateInputType = {
  id?: true
  sn?: true
  createdAt?: true
  updatedAt?: true
  title?: true
  description?: true
}

export type IdeaMaxAggregateInputType = {
  id?: true
  sn?: true
  createdAt?: true
  updatedAt?: true
  title?: true
  description?: true
}

export type IdeaCountAggregateInputType = {
  id?: true
  sn?: true
  createdAt?: true
  updatedAt?: true
  title?: true
  description?: true
  logs?: true
  _all?: true
}

export type IdeaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Idea to aggregate.
   */
  where?: Prisma.IdeaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ideas to fetch.
   */
  orderBy?: Prisma.IdeaOrderByWithRelationInput | Prisma.IdeaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IdeaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ideas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ideas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Ideas
  **/
  _count?: true | IdeaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IdeaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IdeaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IdeaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IdeaMaxAggregateInputType
}

export type GetIdeaAggregateType<T extends IdeaAggregateArgs> = {
      [P in keyof T & keyof AggregateIdea]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIdea[P]>
    : Prisma.GetScalarType<T[P], AggregateIdea[P]>
}




export type IdeaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IdeaWhereInput
  orderBy?: Prisma.IdeaOrderByWithAggregationInput | Prisma.IdeaOrderByWithAggregationInput[]
  by: Prisma.IdeaScalarFieldEnum[] | Prisma.IdeaScalarFieldEnum
  having?: Prisma.IdeaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IdeaCountAggregateInputType | true
  _avg?: IdeaAvgAggregateInputType
  _sum?: IdeaSumAggregateInputType
  _min?: IdeaMinAggregateInputType
  _max?: IdeaMaxAggregateInputType
}

export type IdeaGroupByOutputType = {
  id: string
  sn: number
  createdAt: Date
  updatedAt: Date
  title: string
  description: string
  logs: PrismaJson.IdeaLog[]
  _count: IdeaCountAggregateOutputType | null
  _avg: IdeaAvgAggregateOutputType | null
  _sum: IdeaSumAggregateOutputType | null
  _min: IdeaMinAggregateOutputType | null
  _max: IdeaMaxAggregateOutputType | null
}

type GetIdeaGroupByPayload<T extends IdeaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IdeaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IdeaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IdeaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IdeaGroupByOutputType[P]>
      }
    >
  >



export type IdeaWhereInput = {
  AND?: Prisma.IdeaWhereInput | Prisma.IdeaWhereInput[]
  OR?: Prisma.IdeaWhereInput[]
  NOT?: Prisma.IdeaWhereInput | Prisma.IdeaWhereInput[]
  id?: Prisma.StringFilter<"Idea"> | string
  sn?: Prisma.IntFilter<"Idea"> | number
  createdAt?: Prisma.DateTimeFilter<"Idea"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Idea"> | Date | string
  title?: Prisma.StringFilter<"Idea"> | string
  description?: Prisma.StringFilter<"Idea"> | string
  logs?: PJTG.NullableListFilter<PrismaJson.IdeaLog>
}

export type IdeaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  sn?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  logs?: Prisma.SortOrder
}

export type IdeaWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  sn?: number
  AND?: Prisma.IdeaWhereInput | Prisma.IdeaWhereInput[]
  OR?: Prisma.IdeaWhereInput[]
  NOT?: Prisma.IdeaWhereInput | Prisma.IdeaWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Idea"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Idea"> | Date | string
  title?: Prisma.StringFilter<"Idea"> | string
  description?: Prisma.StringFilter<"Idea"> | string
  logs?: Prisma.JsonNullableListFilter<"Idea">
}, "id" | "sn">

export type IdeaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  sn?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  logs?: Prisma.SortOrder
  _count?: Prisma.IdeaCountOrderByAggregateInput
  _avg?: Prisma.IdeaAvgOrderByAggregateInput
  _max?: Prisma.IdeaMaxOrderByAggregateInput
  _min?: Prisma.IdeaMinOrderByAggregateInput
  _sum?: Prisma.IdeaSumOrderByAggregateInput
}

export type IdeaScalarWhereWithAggregatesInput = {
  AND?: Prisma.IdeaScalarWhereWithAggregatesInput | Prisma.IdeaScalarWhereWithAggregatesInput[]
  OR?: Prisma.IdeaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IdeaScalarWhereWithAggregatesInput | Prisma.IdeaScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Idea"> | string
  sn?: Prisma.IntWithAggregatesFilter<"Idea"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Idea"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Idea"> | Date | string
  title?: Prisma.StringWithAggregatesFilter<"Idea"> | string
  description?: Prisma.StringWithAggregatesFilter<"Idea"> | string
  logs?: PJTG.NullableListFilter<PrismaJson.IdeaLog>
}

export type IdeaCreateInput = {
  id?: string
  sn?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  description: string
  logs?: PJTG.CreateManyInput<PrismaJson.IdeaLog>
}

export type IdeaUncheckedCreateInput = {
  id?: string
  sn?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  description: string
  logs?: PJTG.CreateManyInput<PrismaJson.IdeaLog>
}

export type IdeaUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  logs?: PJTG.UpdateManyInput<PrismaJson.IdeaLog>
}

export type IdeaUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sn?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  logs?: PJTG.UpdateManyInput<PrismaJson.IdeaLog>
}

export type IdeaCreateManyInput = {
  id?: string
  sn?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  description: string
  logs?: PJTG.CreateManyInput<PrismaJson.IdeaLog>
}

export type IdeaUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  logs?: PJTG.UpdateManyInput<PrismaJson.IdeaLog>
}

export type IdeaUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sn?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  logs?: PJTG.UpdateManyInput<PrismaJson.IdeaLog>
}

export type JsonNullableListFilter<$PrismaModel = never> =
| Prisma.PatchUndefined<
    Prisma.Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
    Required<JsonNullableListFilterBase<$PrismaModel>>
  >
| Prisma.OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

export type JsonNullableListFilterBase<$PrismaModel = never> = {
  equals?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel> | null
  has?: runtime.InputJsonValue | Prisma.JsonFieldRefInput<$PrismaModel> | null
  hasEvery?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel>
  hasSome?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type IdeaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sn?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  logs?: Prisma.SortOrder
}

export type IdeaAvgOrderByAggregateInput = {
  sn?: Prisma.SortOrder
}

export type IdeaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sn?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type IdeaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sn?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type IdeaSumOrderByAggregateInput = {
  sn?: Prisma.SortOrder
}

export type IdeaCreatelogsInput = {
  set: runtime.InputJsonValue[]
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IdeaUpdatelogsInput = {
  set?: runtime.InputJsonValue[]
  push?: runtime.InputJsonValue | runtime.InputJsonValue[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type IdeaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sn?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  description?: boolean
  logs?: boolean
}, ExtArgs["result"]["idea"]>

export type IdeaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sn?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  description?: boolean
  logs?: boolean
}, ExtArgs["result"]["idea"]>

export type IdeaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sn?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  description?: boolean
  logs?: boolean
}, ExtArgs["result"]["idea"]>

export type IdeaSelectScalar = {
  id?: boolean
  sn?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  description?: boolean
  logs?: boolean
}

export type IdeaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "sn" | "createdAt" | "updatedAt" | "title" | "description" | "logs", ExtArgs["result"]["idea"]>

export type $IdeaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Idea"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    sn: number
    createdAt: Date
    updatedAt: Date
    title: string
    description: string
    /**
     * [IdeaLog]
     */
    logs: PrismaJson.IdeaLog[]
  }, ExtArgs["result"]["idea"]>
  composites: {}
}

export type IdeaGetPayload<S extends boolean | null | undefined | IdeaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IdeaPayload, S>

export type IdeaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IdeaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IdeaCountAggregateInputType | true
  }

export interface IdeaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Idea'], meta: { name: 'Idea' } }
  /**
   * Find zero or one Idea that matches the filter.
   * @param {IdeaFindUniqueArgs} args - Arguments to find a Idea
   * @example
   * // Get one Idea
   * const idea = await prisma.idea.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IdeaFindUniqueArgs>(args: Prisma.SelectSubset<T, IdeaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IdeaClient<runtime.Types.Result.GetResult<Prisma.$IdeaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Idea that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IdeaFindUniqueOrThrowArgs} args - Arguments to find a Idea
   * @example
   * // Get one Idea
   * const idea = await prisma.idea.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IdeaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IdeaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IdeaClient<runtime.Types.Result.GetResult<Prisma.$IdeaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Idea that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaFindFirstArgs} args - Arguments to find a Idea
   * @example
   * // Get one Idea
   * const idea = await prisma.idea.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IdeaFindFirstArgs>(args?: Prisma.SelectSubset<T, IdeaFindFirstArgs<ExtArgs>>): Prisma.Prisma__IdeaClient<runtime.Types.Result.GetResult<Prisma.$IdeaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Idea that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaFindFirstOrThrowArgs} args - Arguments to find a Idea
   * @example
   * // Get one Idea
   * const idea = await prisma.idea.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IdeaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IdeaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IdeaClient<runtime.Types.Result.GetResult<Prisma.$IdeaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Ideas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Ideas
   * const ideas = await prisma.idea.findMany()
   * 
   * // Get first 10 Ideas
   * const ideas = await prisma.idea.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const ideaWithIdOnly = await prisma.idea.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IdeaFindManyArgs>(args?: Prisma.SelectSubset<T, IdeaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IdeaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Idea.
   * @param {IdeaCreateArgs} args - Arguments to create a Idea.
   * @example
   * // Create one Idea
   * const Idea = await prisma.idea.create({
   *   data: {
   *     // ... data to create a Idea
   *   }
   * })
   * 
   */
  create<T extends IdeaCreateArgs>(args: Prisma.SelectSubset<T, IdeaCreateArgs<ExtArgs>>): Prisma.Prisma__IdeaClient<runtime.Types.Result.GetResult<Prisma.$IdeaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Ideas.
   * @param {IdeaCreateManyArgs} args - Arguments to create many Ideas.
   * @example
   * // Create many Ideas
   * const idea = await prisma.idea.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IdeaCreateManyArgs>(args?: Prisma.SelectSubset<T, IdeaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Ideas and returns the data saved in the database.
   * @param {IdeaCreateManyAndReturnArgs} args - Arguments to create many Ideas.
   * @example
   * // Create many Ideas
   * const idea = await prisma.idea.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Ideas and only return the `id`
   * const ideaWithIdOnly = await prisma.idea.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IdeaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IdeaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IdeaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Idea.
   * @param {IdeaDeleteArgs} args - Arguments to delete one Idea.
   * @example
   * // Delete one Idea
   * const Idea = await prisma.idea.delete({
   *   where: {
   *     // ... filter to delete one Idea
   *   }
   * })
   * 
   */
  delete<T extends IdeaDeleteArgs>(args: Prisma.SelectSubset<T, IdeaDeleteArgs<ExtArgs>>): Prisma.Prisma__IdeaClient<runtime.Types.Result.GetResult<Prisma.$IdeaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Idea.
   * @param {IdeaUpdateArgs} args - Arguments to update one Idea.
   * @example
   * // Update one Idea
   * const idea = await prisma.idea.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IdeaUpdateArgs>(args: Prisma.SelectSubset<T, IdeaUpdateArgs<ExtArgs>>): Prisma.Prisma__IdeaClient<runtime.Types.Result.GetResult<Prisma.$IdeaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Ideas.
   * @param {IdeaDeleteManyArgs} args - Arguments to filter Ideas to delete.
   * @example
   * // Delete a few Ideas
   * const { count } = await prisma.idea.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IdeaDeleteManyArgs>(args?: Prisma.SelectSubset<T, IdeaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ideas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Ideas
   * const idea = await prisma.idea.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IdeaUpdateManyArgs>(args: Prisma.SelectSubset<T, IdeaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ideas and returns the data updated in the database.
   * @param {IdeaUpdateManyAndReturnArgs} args - Arguments to update many Ideas.
   * @example
   * // Update many Ideas
   * const idea = await prisma.idea.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Ideas and only return the `id`
   * const ideaWithIdOnly = await prisma.idea.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IdeaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IdeaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IdeaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Idea.
   * @param {IdeaUpsertArgs} args - Arguments to update or create a Idea.
   * @example
   * // Update or create a Idea
   * const idea = await prisma.idea.upsert({
   *   create: {
   *     // ... data to create a Idea
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Idea we want to update
   *   }
   * })
   */
  upsert<T extends IdeaUpsertArgs>(args: Prisma.SelectSubset<T, IdeaUpsertArgs<ExtArgs>>): Prisma.Prisma__IdeaClient<runtime.Types.Result.GetResult<Prisma.$IdeaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Ideas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaCountArgs} args - Arguments to filter Ideas to count.
   * @example
   * // Count the number of Ideas
   * const count = await prisma.idea.count({
   *   where: {
   *     // ... the filter for the Ideas we want to count
   *   }
   * })
  **/
  count<T extends IdeaCountArgs>(
    args?: Prisma.Subset<T, IdeaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IdeaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Idea.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IdeaAggregateArgs>(args: Prisma.Subset<T, IdeaAggregateArgs>): Prisma.PrismaPromise<GetIdeaAggregateType<T>>

  /**
   * Group by Idea.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IdeaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IdeaGroupByArgs['orderBy'] }
      : { orderBy?: IdeaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IdeaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIdeaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Idea model
 */
readonly fields: IdeaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Idea.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IdeaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Idea model
 */
export interface IdeaFieldRefs {
  readonly id: Prisma.FieldRef<"Idea", 'String'>
  readonly sn: Prisma.FieldRef<"Idea", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Idea", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Idea", 'DateTime'>
  readonly title: Prisma.FieldRef<"Idea", 'String'>
  readonly description: Prisma.FieldRef<"Idea", 'String'>
  readonly logs: Prisma.FieldRef<"Idea", 'Json[]'>
}
    

// Custom InputTypes
/**
 * Idea findUnique
 */
export type IdeaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Idea
   */
  select?: Prisma.IdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Idea
   */
  omit?: Prisma.IdeaOmit<ExtArgs> | null
  /**
   * Filter, which Idea to fetch.
   */
  where: Prisma.IdeaWhereUniqueInput
}

/**
 * Idea findUniqueOrThrow
 */
export type IdeaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Idea
   */
  select?: Prisma.IdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Idea
   */
  omit?: Prisma.IdeaOmit<ExtArgs> | null
  /**
   * Filter, which Idea to fetch.
   */
  where: Prisma.IdeaWhereUniqueInput
}

/**
 * Idea findFirst
 */
export type IdeaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Idea
   */
  select?: Prisma.IdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Idea
   */
  omit?: Prisma.IdeaOmit<ExtArgs> | null
  /**
   * Filter, which Idea to fetch.
   */
  where?: Prisma.IdeaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ideas to fetch.
   */
  orderBy?: Prisma.IdeaOrderByWithRelationInput | Prisma.IdeaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Ideas.
   */
  cursor?: Prisma.IdeaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ideas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ideas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Ideas.
   */
  distinct?: Prisma.IdeaScalarFieldEnum | Prisma.IdeaScalarFieldEnum[]
}

/**
 * Idea findFirstOrThrow
 */
export type IdeaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Idea
   */
  select?: Prisma.IdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Idea
   */
  omit?: Prisma.IdeaOmit<ExtArgs> | null
  /**
   * Filter, which Idea to fetch.
   */
  where?: Prisma.IdeaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ideas to fetch.
   */
  orderBy?: Prisma.IdeaOrderByWithRelationInput | Prisma.IdeaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Ideas.
   */
  cursor?: Prisma.IdeaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ideas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ideas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Ideas.
   */
  distinct?: Prisma.IdeaScalarFieldEnum | Prisma.IdeaScalarFieldEnum[]
}

/**
 * Idea findMany
 */
export type IdeaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Idea
   */
  select?: Prisma.IdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Idea
   */
  omit?: Prisma.IdeaOmit<ExtArgs> | null
  /**
   * Filter, which Ideas to fetch.
   */
  where?: Prisma.IdeaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ideas to fetch.
   */
  orderBy?: Prisma.IdeaOrderByWithRelationInput | Prisma.IdeaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Ideas.
   */
  cursor?: Prisma.IdeaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ideas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ideas.
   */
  skip?: number
  distinct?: Prisma.IdeaScalarFieldEnum | Prisma.IdeaScalarFieldEnum[]
}

/**
 * Idea create
 */
export type IdeaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Idea
   */
  select?: Prisma.IdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Idea
   */
  omit?: Prisma.IdeaOmit<ExtArgs> | null
  /**
   * The data needed to create a Idea.
   */
  data: Prisma.XOR<Prisma.IdeaCreateInput, Prisma.IdeaUncheckedCreateInput>
}

/**
 * Idea createMany
 */
export type IdeaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Ideas.
   */
  data: Prisma.IdeaCreateManyInput | Prisma.IdeaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Idea createManyAndReturn
 */
export type IdeaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Idea
   */
  select?: Prisma.IdeaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Idea
   */
  omit?: Prisma.IdeaOmit<ExtArgs> | null
  /**
   * The data used to create many Ideas.
   */
  data: Prisma.IdeaCreateManyInput | Prisma.IdeaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Idea update
 */
export type IdeaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Idea
   */
  select?: Prisma.IdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Idea
   */
  omit?: Prisma.IdeaOmit<ExtArgs> | null
  /**
   * The data needed to update a Idea.
   */
  data: Prisma.XOR<Prisma.IdeaUpdateInput, Prisma.IdeaUncheckedUpdateInput>
  /**
   * Choose, which Idea to update.
   */
  where: Prisma.IdeaWhereUniqueInput
}

/**
 * Idea updateMany
 */
export type IdeaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Ideas.
   */
  data: Prisma.XOR<Prisma.IdeaUpdateManyMutationInput, Prisma.IdeaUncheckedUpdateManyInput>
  /**
   * Filter which Ideas to update
   */
  where?: Prisma.IdeaWhereInput
  /**
   * Limit how many Ideas to update.
   */
  limit?: number
}

/**
 * Idea updateManyAndReturn
 */
export type IdeaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Idea
   */
  select?: Prisma.IdeaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Idea
   */
  omit?: Prisma.IdeaOmit<ExtArgs> | null
  /**
   * The data used to update Ideas.
   */
  data: Prisma.XOR<Prisma.IdeaUpdateManyMutationInput, Prisma.IdeaUncheckedUpdateManyInput>
  /**
   * Filter which Ideas to update
   */
  where?: Prisma.IdeaWhereInput
  /**
   * Limit how many Ideas to update.
   */
  limit?: number
}

/**
 * Idea upsert
 */
export type IdeaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Idea
   */
  select?: Prisma.IdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Idea
   */
  omit?: Prisma.IdeaOmit<ExtArgs> | null
  /**
   * The filter to search for the Idea to update in case it exists.
   */
  where: Prisma.IdeaWhereUniqueInput
  /**
   * In case the Idea found by the `where` argument doesn't exist, create a new Idea with this data.
   */
  create: Prisma.XOR<Prisma.IdeaCreateInput, Prisma.IdeaUncheckedCreateInput>
  /**
   * In case the Idea was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IdeaUpdateInput, Prisma.IdeaUncheckedUpdateInput>
}

/**
 * Idea delete
 */
export type IdeaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Idea
   */
  select?: Prisma.IdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Idea
   */
  omit?: Prisma.IdeaOmit<ExtArgs> | null
  /**
   * Filter which Idea to delete.
   */
  where: Prisma.IdeaWhereUniqueInput
}

/**
 * Idea deleteMany
 */
export type IdeaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Ideas to delete
   */
  where?: Prisma.IdeaWhereInput
  /**
   * Limit how many Ideas to delete.
   */
  limit?: number
}

/**
 * Idea without action
 */
export type IdeaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Idea
   */
  select?: Prisma.IdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Idea
   */
  omit?: Prisma.IdeaOmit<ExtArgs> | null
}
