
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AppConfigItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AppConfigItem
 * 
 */
export type AppConfigItemModel = runtime.Types.Result.DefaultSelection<Prisma.$AppConfigItemPayload>

export type AggregateAppConfigItem = {
  _count: AppConfigItemCountAggregateOutputType | null
  _min: AppConfigItemMinAggregateOutputType | null
  _max: AppConfigItemMaxAggregateOutputType | null
}

export type AppConfigItemMinAggregateOutputType = {
  key: string | null
  value: string | null
}

export type AppConfigItemMaxAggregateOutputType = {
  key: string | null
  value: string | null
}

export type AppConfigItemCountAggregateOutputType = {
  key: number
  value: number
  _all: number
}


export type AppConfigItemMinAggregateInputType = {
  key?: true
  value?: true
}

export type AppConfigItemMaxAggregateInputType = {
  key?: true
  value?: true
}

export type AppConfigItemCountAggregateInputType = {
  key?: true
  value?: true
  _all?: true
}

export type AppConfigItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AppConfigItem to aggregate.
   */
  where?: Prisma.AppConfigItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AppConfigItems to fetch.
   */
  orderBy?: Prisma.AppConfigItemOrderByWithRelationInput | Prisma.AppConfigItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AppConfigItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AppConfigItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AppConfigItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AppConfigItems
  **/
  _count?: true | AppConfigItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AppConfigItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AppConfigItemMaxAggregateInputType
}

export type GetAppConfigItemAggregateType<T extends AppConfigItemAggregateArgs> = {
      [P in keyof T & keyof AggregateAppConfigItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAppConfigItem[P]>
    : Prisma.GetScalarType<T[P], AggregateAppConfigItem[P]>
}




export type AppConfigItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AppConfigItemWhereInput
  orderBy?: Prisma.AppConfigItemOrderByWithAggregationInput | Prisma.AppConfigItemOrderByWithAggregationInput[]
  by: Prisma.AppConfigItemScalarFieldEnum[] | Prisma.AppConfigItemScalarFieldEnum
  having?: Prisma.AppConfigItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AppConfigItemCountAggregateInputType | true
  _min?: AppConfigItemMinAggregateInputType
  _max?: AppConfigItemMaxAggregateInputType
}

export type AppConfigItemGroupByOutputType = {
  key: string
  value: string
  _count: AppConfigItemCountAggregateOutputType | null
  _min: AppConfigItemMinAggregateOutputType | null
  _max: AppConfigItemMaxAggregateOutputType | null
}

type GetAppConfigItemGroupByPayload<T extends AppConfigItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AppConfigItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AppConfigItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AppConfigItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AppConfigItemGroupByOutputType[P]>
      }
    >
  >



export type AppConfigItemWhereInput = {
  AND?: Prisma.AppConfigItemWhereInput | Prisma.AppConfigItemWhereInput[]
  OR?: Prisma.AppConfigItemWhereInput[]
  NOT?: Prisma.AppConfigItemWhereInput | Prisma.AppConfigItemWhereInput[]
  key?: Prisma.StringFilter<"AppConfigItem"> | string
  value?: Prisma.StringFilter<"AppConfigItem"> | string
}

export type AppConfigItemOrderByWithRelationInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type AppConfigItemWhereUniqueInput = Prisma.AtLeast<{
  key?: string
  AND?: Prisma.AppConfigItemWhereInput | Prisma.AppConfigItemWhereInput[]
  OR?: Prisma.AppConfigItemWhereInput[]
  NOT?: Prisma.AppConfigItemWhereInput | Prisma.AppConfigItemWhereInput[]
  value?: Prisma.StringFilter<"AppConfigItem"> | string
}, "key">

export type AppConfigItemOrderByWithAggregationInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  _count?: Prisma.AppConfigItemCountOrderByAggregateInput
  _max?: Prisma.AppConfigItemMaxOrderByAggregateInput
  _min?: Prisma.AppConfigItemMinOrderByAggregateInput
}

export type AppConfigItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.AppConfigItemScalarWhereWithAggregatesInput | Prisma.AppConfigItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.AppConfigItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AppConfigItemScalarWhereWithAggregatesInput | Prisma.AppConfigItemScalarWhereWithAggregatesInput[]
  key?: Prisma.StringWithAggregatesFilter<"AppConfigItem"> | string
  value?: Prisma.StringWithAggregatesFilter<"AppConfigItem"> | string
}

export type AppConfigItemCreateInput = {
  key: string
  value: string
}

export type AppConfigItemUncheckedCreateInput = {
  key: string
  value: string
}

export type AppConfigItemUpdateInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppConfigItemUncheckedUpdateInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppConfigItemCreateManyInput = {
  key: string
  value: string
}

export type AppConfigItemUpdateManyMutationInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppConfigItemUncheckedUpdateManyInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppConfigItemCountOrderByAggregateInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type AppConfigItemMaxOrderByAggregateInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type AppConfigItemMinOrderByAggregateInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
}



export type AppConfigItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  key?: boolean
  value?: boolean
}, ExtArgs["result"]["appConfigItem"]>

export type AppConfigItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  key?: boolean
  value?: boolean
}, ExtArgs["result"]["appConfigItem"]>

export type AppConfigItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  key?: boolean
  value?: boolean
}, ExtArgs["result"]["appConfigItem"]>

export type AppConfigItemSelectScalar = {
  key?: boolean
  value?: boolean
}

export type AppConfigItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"key" | "value", ExtArgs["result"]["appConfigItem"]>

export type $AppConfigItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AppConfigItem"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    key: string
    value: string
  }, ExtArgs["result"]["appConfigItem"]>
  composites: {}
}

export type AppConfigItemGetPayload<S extends boolean | null | undefined | AppConfigItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AppConfigItemPayload, S>

export type AppConfigItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AppConfigItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AppConfigItemCountAggregateInputType | true
  }

export interface AppConfigItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppConfigItem'], meta: { name: 'AppConfigItem' } }
  /**
   * Find zero or one AppConfigItem that matches the filter.
   * @param {AppConfigItemFindUniqueArgs} args - Arguments to find a AppConfigItem
   * @example
   * // Get one AppConfigItem
   * const appConfigItem = await prisma.appConfigItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AppConfigItemFindUniqueArgs>(args: Prisma.SelectSubset<T, AppConfigItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AppConfigItemClient<runtime.Types.Result.GetResult<Prisma.$AppConfigItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AppConfigItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AppConfigItemFindUniqueOrThrowArgs} args - Arguments to find a AppConfigItem
   * @example
   * // Get one AppConfigItem
   * const appConfigItem = await prisma.appConfigItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AppConfigItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AppConfigItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AppConfigItemClient<runtime.Types.Result.GetResult<Prisma.$AppConfigItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AppConfigItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppConfigItemFindFirstArgs} args - Arguments to find a AppConfigItem
   * @example
   * // Get one AppConfigItem
   * const appConfigItem = await prisma.appConfigItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AppConfigItemFindFirstArgs>(args?: Prisma.SelectSubset<T, AppConfigItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__AppConfigItemClient<runtime.Types.Result.GetResult<Prisma.$AppConfigItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AppConfigItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppConfigItemFindFirstOrThrowArgs} args - Arguments to find a AppConfigItem
   * @example
   * // Get one AppConfigItem
   * const appConfigItem = await prisma.appConfigItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AppConfigItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AppConfigItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AppConfigItemClient<runtime.Types.Result.GetResult<Prisma.$AppConfigItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AppConfigItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppConfigItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AppConfigItems
   * const appConfigItems = await prisma.appConfigItem.findMany()
   * 
   * // Get first 10 AppConfigItems
   * const appConfigItems = await prisma.appConfigItem.findMany({ take: 10 })
   * 
   * // Only select the `key`
   * const appConfigItemWithKeyOnly = await prisma.appConfigItem.findMany({ select: { key: true } })
   * 
   */
  findMany<T extends AppConfigItemFindManyArgs>(args?: Prisma.SelectSubset<T, AppConfigItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppConfigItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AppConfigItem.
   * @param {AppConfigItemCreateArgs} args - Arguments to create a AppConfigItem.
   * @example
   * // Create one AppConfigItem
   * const AppConfigItem = await prisma.appConfigItem.create({
   *   data: {
   *     // ... data to create a AppConfigItem
   *   }
   * })
   * 
   */
  create<T extends AppConfigItemCreateArgs>(args: Prisma.SelectSubset<T, AppConfigItemCreateArgs<ExtArgs>>): Prisma.Prisma__AppConfigItemClient<runtime.Types.Result.GetResult<Prisma.$AppConfigItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AppConfigItems.
   * @param {AppConfigItemCreateManyArgs} args - Arguments to create many AppConfigItems.
   * @example
   * // Create many AppConfigItems
   * const appConfigItem = await prisma.appConfigItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AppConfigItemCreateManyArgs>(args?: Prisma.SelectSubset<T, AppConfigItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AppConfigItems and returns the data saved in the database.
   * @param {AppConfigItemCreateManyAndReturnArgs} args - Arguments to create many AppConfigItems.
   * @example
   * // Create many AppConfigItems
   * const appConfigItem = await prisma.appConfigItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AppConfigItems and only return the `key`
   * const appConfigItemWithKeyOnly = await prisma.appConfigItem.createManyAndReturn({
   *   select: { key: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AppConfigItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AppConfigItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppConfigItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AppConfigItem.
   * @param {AppConfigItemDeleteArgs} args - Arguments to delete one AppConfigItem.
   * @example
   * // Delete one AppConfigItem
   * const AppConfigItem = await prisma.appConfigItem.delete({
   *   where: {
   *     // ... filter to delete one AppConfigItem
   *   }
   * })
   * 
   */
  delete<T extends AppConfigItemDeleteArgs>(args: Prisma.SelectSubset<T, AppConfigItemDeleteArgs<ExtArgs>>): Prisma.Prisma__AppConfigItemClient<runtime.Types.Result.GetResult<Prisma.$AppConfigItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AppConfigItem.
   * @param {AppConfigItemUpdateArgs} args - Arguments to update one AppConfigItem.
   * @example
   * // Update one AppConfigItem
   * const appConfigItem = await prisma.appConfigItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AppConfigItemUpdateArgs>(args: Prisma.SelectSubset<T, AppConfigItemUpdateArgs<ExtArgs>>): Prisma.Prisma__AppConfigItemClient<runtime.Types.Result.GetResult<Prisma.$AppConfigItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AppConfigItems.
   * @param {AppConfigItemDeleteManyArgs} args - Arguments to filter AppConfigItems to delete.
   * @example
   * // Delete a few AppConfigItems
   * const { count } = await prisma.appConfigItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AppConfigItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, AppConfigItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AppConfigItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppConfigItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AppConfigItems
   * const appConfigItem = await prisma.appConfigItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AppConfigItemUpdateManyArgs>(args: Prisma.SelectSubset<T, AppConfigItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AppConfigItems and returns the data updated in the database.
   * @param {AppConfigItemUpdateManyAndReturnArgs} args - Arguments to update many AppConfigItems.
   * @example
   * // Update many AppConfigItems
   * const appConfigItem = await prisma.appConfigItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AppConfigItems and only return the `key`
   * const appConfigItemWithKeyOnly = await prisma.appConfigItem.updateManyAndReturn({
   *   select: { key: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AppConfigItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AppConfigItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppConfigItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AppConfigItem.
   * @param {AppConfigItemUpsertArgs} args - Arguments to update or create a AppConfigItem.
   * @example
   * // Update or create a AppConfigItem
   * const appConfigItem = await prisma.appConfigItem.upsert({
   *   create: {
   *     // ... data to create a AppConfigItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AppConfigItem we want to update
   *   }
   * })
   */
  upsert<T extends AppConfigItemUpsertArgs>(args: Prisma.SelectSubset<T, AppConfigItemUpsertArgs<ExtArgs>>): Prisma.Prisma__AppConfigItemClient<runtime.Types.Result.GetResult<Prisma.$AppConfigItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AppConfigItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppConfigItemCountArgs} args - Arguments to filter AppConfigItems to count.
   * @example
   * // Count the number of AppConfigItems
   * const count = await prisma.appConfigItem.count({
   *   where: {
   *     // ... the filter for the AppConfigItems we want to count
   *   }
   * })
  **/
  count<T extends AppConfigItemCountArgs>(
    args?: Prisma.Subset<T, AppConfigItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AppConfigItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AppConfigItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppConfigItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AppConfigItemAggregateArgs>(args: Prisma.Subset<T, AppConfigItemAggregateArgs>): Prisma.PrismaPromise<GetAppConfigItemAggregateType<T>>

  /**
   * Group by AppConfigItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppConfigItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AppConfigItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AppConfigItemGroupByArgs['orderBy'] }
      : { orderBy?: AppConfigItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AppConfigItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppConfigItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AppConfigItem model
 */
readonly fields: AppConfigItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AppConfigItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AppConfigItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AppConfigItem model
 */
export interface AppConfigItemFieldRefs {
  readonly key: Prisma.FieldRef<"AppConfigItem", 'String'>
  readonly value: Prisma.FieldRef<"AppConfigItem", 'String'>
}
    

// Custom InputTypes
/**
 * AppConfigItem findUnique
 */
export type AppConfigItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppConfigItem
   */
  select?: Prisma.AppConfigItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppConfigItem
   */
  omit?: Prisma.AppConfigItemOmit<ExtArgs> | null
  /**
   * Filter, which AppConfigItem to fetch.
   */
  where: Prisma.AppConfigItemWhereUniqueInput
}

/**
 * AppConfigItem findUniqueOrThrow
 */
export type AppConfigItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppConfigItem
   */
  select?: Prisma.AppConfigItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppConfigItem
   */
  omit?: Prisma.AppConfigItemOmit<ExtArgs> | null
  /**
   * Filter, which AppConfigItem to fetch.
   */
  where: Prisma.AppConfigItemWhereUniqueInput
}

/**
 * AppConfigItem findFirst
 */
export type AppConfigItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppConfigItem
   */
  select?: Prisma.AppConfigItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppConfigItem
   */
  omit?: Prisma.AppConfigItemOmit<ExtArgs> | null
  /**
   * Filter, which AppConfigItem to fetch.
   */
  where?: Prisma.AppConfigItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AppConfigItems to fetch.
   */
  orderBy?: Prisma.AppConfigItemOrderByWithRelationInput | Prisma.AppConfigItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AppConfigItems.
   */
  cursor?: Prisma.AppConfigItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AppConfigItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AppConfigItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AppConfigItems.
   */
  distinct?: Prisma.AppConfigItemScalarFieldEnum | Prisma.AppConfigItemScalarFieldEnum[]
}

/**
 * AppConfigItem findFirstOrThrow
 */
export type AppConfigItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppConfigItem
   */
  select?: Prisma.AppConfigItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppConfigItem
   */
  omit?: Prisma.AppConfigItemOmit<ExtArgs> | null
  /**
   * Filter, which AppConfigItem to fetch.
   */
  where?: Prisma.AppConfigItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AppConfigItems to fetch.
   */
  orderBy?: Prisma.AppConfigItemOrderByWithRelationInput | Prisma.AppConfigItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AppConfigItems.
   */
  cursor?: Prisma.AppConfigItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AppConfigItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AppConfigItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AppConfigItems.
   */
  distinct?: Prisma.AppConfigItemScalarFieldEnum | Prisma.AppConfigItemScalarFieldEnum[]
}

/**
 * AppConfigItem findMany
 */
export type AppConfigItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppConfigItem
   */
  select?: Prisma.AppConfigItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppConfigItem
   */
  omit?: Prisma.AppConfigItemOmit<ExtArgs> | null
  /**
   * Filter, which AppConfigItems to fetch.
   */
  where?: Prisma.AppConfigItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AppConfigItems to fetch.
   */
  orderBy?: Prisma.AppConfigItemOrderByWithRelationInput | Prisma.AppConfigItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AppConfigItems.
   */
  cursor?: Prisma.AppConfigItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AppConfigItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AppConfigItems.
   */
  skip?: number
  distinct?: Prisma.AppConfigItemScalarFieldEnum | Prisma.AppConfigItemScalarFieldEnum[]
}

/**
 * AppConfigItem create
 */
export type AppConfigItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppConfigItem
   */
  select?: Prisma.AppConfigItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppConfigItem
   */
  omit?: Prisma.AppConfigItemOmit<ExtArgs> | null
  /**
   * The data needed to create a AppConfigItem.
   */
  data: Prisma.XOR<Prisma.AppConfigItemCreateInput, Prisma.AppConfigItemUncheckedCreateInput>
}

/**
 * AppConfigItem createMany
 */
export type AppConfigItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AppConfigItems.
   */
  data: Prisma.AppConfigItemCreateManyInput | Prisma.AppConfigItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AppConfigItem createManyAndReturn
 */
export type AppConfigItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppConfigItem
   */
  select?: Prisma.AppConfigItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AppConfigItem
   */
  omit?: Prisma.AppConfigItemOmit<ExtArgs> | null
  /**
   * The data used to create many AppConfigItems.
   */
  data: Prisma.AppConfigItemCreateManyInput | Prisma.AppConfigItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AppConfigItem update
 */
export type AppConfigItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppConfigItem
   */
  select?: Prisma.AppConfigItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppConfigItem
   */
  omit?: Prisma.AppConfigItemOmit<ExtArgs> | null
  /**
   * The data needed to update a AppConfigItem.
   */
  data: Prisma.XOR<Prisma.AppConfigItemUpdateInput, Prisma.AppConfigItemUncheckedUpdateInput>
  /**
   * Choose, which AppConfigItem to update.
   */
  where: Prisma.AppConfigItemWhereUniqueInput
}

/**
 * AppConfigItem updateMany
 */
export type AppConfigItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AppConfigItems.
   */
  data: Prisma.XOR<Prisma.AppConfigItemUpdateManyMutationInput, Prisma.AppConfigItemUncheckedUpdateManyInput>
  /**
   * Filter which AppConfigItems to update
   */
  where?: Prisma.AppConfigItemWhereInput
  /**
   * Limit how many AppConfigItems to update.
   */
  limit?: number
}

/**
 * AppConfigItem updateManyAndReturn
 */
export type AppConfigItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppConfigItem
   */
  select?: Prisma.AppConfigItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AppConfigItem
   */
  omit?: Prisma.AppConfigItemOmit<ExtArgs> | null
  /**
   * The data used to update AppConfigItems.
   */
  data: Prisma.XOR<Prisma.AppConfigItemUpdateManyMutationInput, Prisma.AppConfigItemUncheckedUpdateManyInput>
  /**
   * Filter which AppConfigItems to update
   */
  where?: Prisma.AppConfigItemWhereInput
  /**
   * Limit how many AppConfigItems to update.
   */
  limit?: number
}

/**
 * AppConfigItem upsert
 */
export type AppConfigItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppConfigItem
   */
  select?: Prisma.AppConfigItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppConfigItem
   */
  omit?: Prisma.AppConfigItemOmit<ExtArgs> | null
  /**
   * The filter to search for the AppConfigItem to update in case it exists.
   */
  where: Prisma.AppConfigItemWhereUniqueInput
  /**
   * In case the AppConfigItem found by the `where` argument doesn't exist, create a new AppConfigItem with this data.
   */
  create: Prisma.XOR<Prisma.AppConfigItemCreateInput, Prisma.AppConfigItemUncheckedCreateInput>
  /**
   * In case the AppConfigItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AppConfigItemUpdateInput, Prisma.AppConfigItemUncheckedUpdateInput>
}

/**
 * AppConfigItem delete
 */
export type AppConfigItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppConfigItem
   */
  select?: Prisma.AppConfigItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppConfigItem
   */
  omit?: Prisma.AppConfigItemOmit<ExtArgs> | null
  /**
   * Filter which AppConfigItem to delete.
   */
  where: Prisma.AppConfigItemWhereUniqueInput
}

/**
 * AppConfigItem deleteMany
 */
export type AppConfigItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AppConfigItems to delete
   */
  where?: Prisma.AppConfigItemWhereInput
  /**
   * Limit how many AppConfigItems to delete.
   */
  limit?: number
}

/**
 * AppConfigItem without action
 */
export type AppConfigItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppConfigItem
   */
  select?: Prisma.AppConfigItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppConfigItem
   */
  omit?: Prisma.AppConfigItemOmit<ExtArgs> | null
}
